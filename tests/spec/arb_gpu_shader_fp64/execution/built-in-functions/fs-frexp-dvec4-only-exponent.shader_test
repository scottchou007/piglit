[require]
GLSL >= 1.50
GL_ARB_gpu_shader_fp64

[vertex shader passthrough]

[fragment shader]
#extension GL_ARB_gpu_shader_fp64 : enable

uniform dvec4 u_in;
uniform ivec4 u_exponent;

out vec4 outcolor;

void main()
{
  outcolor = vec4(0, 1, 0, 1);

  ivec4 exponent;
  frexp(u_in, exponent);

  for (int i = 0; i < 4; ++i) {
    if (exponent[i] != u_exponent[i])
      outcolor = vec4(1.0, float(i) / 255,
                      float(exponent[i] + 127) / 255, float(u_exponent[i] + 127) / 255);
  }
}

[test]
clear color 0 0 0 1
clear

uniform dvec4 u_in 2 3 4 9

# The function frexp() splits each single-precision floating-point number in
# <x> into a binary significand, a floating-point number in the range [0.5,
# 1.0), and an integral exponent of two, such that:
#
#    x = significand * 2 ^ exponent
#
# 2 = 0.5 * 2^2
# 3 = 0.75 * 2^2
# 4 = 0.5 * 2^3
# 9 = 0.5625 * 2^4
uniform ivec4 u_exponent 2 2 3 4

draw rect -1 -1 2 2
probe all rgba 0 1 0 1
