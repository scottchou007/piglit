/* From section 5.7 "Structure and Array Operations" of the GLSL 1.50 spec:
 *
 *  "Behavior is undefined if a shader subscripts an array with an index less
 *   than 0 or greater than or equal to the size the array was declared with."
 *
 * The behaviour becomes defined only in robustness extensions, however even
 * if driver is technically allowed to crash or hang, it most likely
 * doesn't want to.
 *
 * gl_TessLevel* may be handled differently in a driver than ordinary arrays.
 */

[require]
GLSL >= 1.50
GL_ARB_tessellation_shader

[vertex shader]
#version 150

const vec2 verts[] = vec2[](vec2(-1, 1),
                            vec2(-1, -1),
                            vec2(1, -1),
                            vec2(1, 1));
const int elts[] = int[](0, 1, 2,
                         0, 2, 3);

void main()
{
	gl_Position = vec4(verts[elts[gl_VertexID]], 0, 1);
}

[tessellation control shader]
#version 150
#extension GL_ARB_tessellation_shader : require

layout(vertices = 3) out;

void main()
{
	int idx1 = -1;
	gl_TessLevelInner[idx1] = 1.0;
	gl_TessLevelOuter[idx1] = 1.0;

	int idx2 = 2147483647;
	gl_TessLevelInner[idx2] = 1.0;
	gl_TessLevelOuter[idx2] = 1.0;

	int idx3 = 2147483647;
	gl_TessLevelInner[idx3 > 0 ? idx3 : -1] = 1.0;
	gl_TessLevelOuter[idx3 > 0 ? idx3 : -1] = 1.0;

	int idx4 = -1;
	gl_TessLevelInner[idx4 * idx4 * idx4] = 1.0;
	gl_TessLevelOuter[idx4 * idx4 * idx4] = 1.0;

	int idx5 = 2;
	gl_TessLevelInner[idx5] = 1.0;

	int idx6 = 4;
	gl_TessLevelOuter[idx6] = 1.0;

	gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
}

[tessellation evaluation shader]
#version 150
#extension GL_ARB_tessellation_shader : require

layout(triangles, equal_spacing) in;

void main()
{
	int index = int(gl_TessCoord.y + (2 * gl_TessCoord.z));
	gl_Position = gl_in[index].gl_Position;
}

[fragment shader]
#version 150

void main()
{
	gl_FragColor = vec4(0.0, 1.0, 0.0, 1.0);
}

[test]
patch parameter vertices 3
draw arrays GL_PATCHES 0 6
