# Test the gl_PrimitiveID input in the TCS.

[require]
GLSL >= 1.50
GL_ARB_tessellation_shader
GL_ARB_shader_atomic_counters
INT GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS >= 1

[vertex shader]
#version 150

out int id;

void main()
{
	id = gl_VertexID;
}

[tessellation control shader]
#version 150
#extension GL_ARB_tessellation_shader : require
#extension GL_ARB_shader_atomic_counters: require

layout(vertices = 4) out;
in int id[];

layout(binding=0) uniform atomic_uint matches;
layout(binding=0, offset=4) uniform atomic_uint mismatches;

void main()
{
	/* we have single-vertex patches. primitive id == vertex id */
	if (id[0] == gl_PrimitiveID)
		atomicCounterIncrement(matches);
	else
		atomicCounterIncrement(mismatches);

	/* cull the patch */
	gl_TessLevelInner[0] = 0.0;
	gl_TessLevelInner[1] = 0.0;

	gl_TessLevelOuter[0] = 0.0;
	gl_TessLevelOuter[1] = 0.0;
	gl_TessLevelOuter[2] = 0.0;
	gl_TessLevelOuter[3] = 0.0;
}

[tessellation evaluation shader]
#version 150
#extension GL_ARB_tessellation_shader : require

layout(quads, equal_spacing) in;

void main()
{
	gl_Position = vec4(0);
}

[fragment shader]
#version 150

void main()
{
	gl_FragColor = vec4(0.0, 1.0, 0.0, 1.0);
}

[test]
atomic counters 2
patch parameter vertices 1
draw arrays GL_PATCHES 0 4

probe atomic counter 0 == 16
probe atomic counter 1 == 0
