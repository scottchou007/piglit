/* From section 5.7 "Structure and Array Operations" of the GLSL 1.30 spec:
 *
 * "Behavior is undefined if a shader subscripts an array with an index less
 *  than 0 or greater than or equal to the size the array was declared with."
 *
 * The behaviour becomes defined only in robustness extensions, however even
 * if driver is technically allowed to crash or hang, it most likely
 * doesn't want to.
 *
 * Robustness extensions encourage to us to return zero on out-of-bounds
 * read, however it's not clearly applicable to the array of opaque types.
 * What will happen when we call a built-in function which expects the
 * opaque type with the instance returned from oob access?
 * In the spirit of the spec - I think neither compilation should fail nor
 * a hang occur.
 */

[require]
GLSL >= 1.40
GL_ARB_shader_atomic_counters
GL_ARB_shader_atomic_counter_ops
SIZE 16 16

[vertex shader passthrough]

[fragment shader]
#version 140
#extension GL_ARB_shader_atomic_counters: require
#extension GL_ARB_shader_atomic_counter_ops: require

out vec4 color;
layout(binding = 0) uniform atomic_uint counter[2];

void main() {
  int idx1 = -1;
  atomicCounterAddARB(counter[idx1], 1u);

  int idx2 = 2147483647;
  atomicCounterAddARB(counter[idx2], 1u);

  int idx3 = 2147483647;
  atomicCounterAddARB(counter[idx3 > 0 ? idx3 : -1], 1u);

  int idx4 = -1;
  atomicCounterAddARB(counter[idx4 * idx4 * idx4], 1u);

  color = vec4(0, 1, 0, 1);
}

[test]
atomic counters 2

draw rect -1 -1 2 2
