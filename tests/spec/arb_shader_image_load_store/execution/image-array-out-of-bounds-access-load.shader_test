/* From section 5.7 "Structure and Array Operations" of the GLSL 1.30 spec:
 *
 * "Behavior is undefined if a shader subscripts an array with an index less
 *  than 0 or greater than or equal to the size the array was declared with."
 *
 * The behaviour becomes defined only in robustness extensions, however even
 * if driver is technically allowed to crash or hang, it most likely
 * doesn't want to.
 *
 * Robustness extensions encourage to us to return zero on out-of-bounds
 * read, however it's not clearly applicable to the array of opaque types.
 * What will happen when we call a built-in function which expects the
 * opaque type with the instance returned from oob access?
 * In the spirit of the spec - I think neither compilation should fail nor
 * a hang occur.
 */

[require]
GL >= 3.3
GLSL >= 3.30
GL_ARB_shader_image_load_store

[vertex shader passthrough]

[fragment shader]
#version 330
#extension GL_ARB_shader_image_load_store: enable

layout(rgba8) readonly uniform image2D[2] tex;
out vec4 outcolor;

void main()
{
	float x = 0.0;

	int idx = -1;
	x += imageLoad(tex[idx], ivec2(0)).x;

	int idx2 = 2147483647;
	x += imageLoad(tex[idx2], ivec2(0)).x;

	int idx3 = 2147483647;
	x += imageLoad(tex[idx3 > 0 ? idx3 : -1], ivec2(0)).x;

	int idx4 = -1;
	x += imageLoad(tex[idx4 * idx4 * idx4], ivec2(0)).x;

	gl_FragColor = vec4(x);
}

[test]

draw rect -1 -1 2 2

